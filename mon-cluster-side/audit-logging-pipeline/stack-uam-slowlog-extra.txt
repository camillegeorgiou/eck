PUT _ingest/pipeline/stack-uam-slowlog-extra
{
  "description": "Additional parsing of Elasticsearch slowlogs. Last update 2024-07-08.",
  "version": 10,
  "processors": [
    {
      "dot_expander": {
        "field": "*"
      }
    },
    {
      "rename": {
        "field": "elasticsearch.slowlog.took_millis",
        "target_field": "elasticsearch.slowlog.duration",
        "ignore_missing": true
      }
    },
    {
      "rename": {
        "field": "elasticsearch.slowlog.types",
        "target_field": "elasticsearch.slowlog.doc_type",
        "ignore_missing": true
      }
    },
    {
      "grok": {
        "field": "elasticsearch.slowlog.message",
        "patterns": [
          "(\\[%{INDEXNAME:elasticsearch.index.name}\\]\\[%{NUMBER:elasticsearch.shard.id}\\])?(%{SPACE})(\\[%{INDEXNAME:elasticsearch.index.name}\\/%{DATA:elasticsearch.index.id}\\])?(%{SPACE})%{SPACE}(took\\[%{DATA:elasticsearch.slowlog.took}\\],)?%{SPACE}(took_millis\\[%{NUMBER:elasticsearch.slowlog.duration:long}\\],)?%{SPACE}(type\\[%{DATA:elasticsearch.slowlog.type}\\],)?%{SPACE}(id\\[%{DATA:elasticsearch.slowlog.id}\\],)?%{SPACE}(routing\\[%{DATA:elasticsearch.slowlog.routing}\\],)?%{SPACE}(total_hits\\[%{NUMBER:elasticsearch.slowlog.total_hits:int}\\],)?%{SPACE}(types\\[%{DATA:elasticsearch.slowlog.types}\\],)?%{SPACE}(stats\\[%{DATA:elasticsearch.slowlog.stats}\\],)?%{SPACE}(search_type\\[%{DATA:elasticsearch.slowlog.search_type}\\],)?%{SPACE}(total_shards\\[%{NUMBER:elasticsearch.slowlog.total_shards:int}\\],)?%{SPACE}(source\\[%{GREEDYMULTILINE:elasticsearch.slowlog.source_query}\\])?,?%{SPACE}(extra_source\\[%{DATA:elasticsearch.slowlog.extra_source}\\])?,?",
          "\\[%{INDEXNAME:elasticsearch.index.name}\\]\\[%{NUMBER:elasticsearch.shard.id}\\]"
        ],
        "pattern_definitions": {
          "GREEDYMULTILINE": "(.|\n)*",
          "INDEXNAME": "[a-zA-Z0-9_.-]*"
        },
        "ignore_failure": true
      }
    },
    {
      "dissect": {
        "field": "elasticsearch.slowlog.id",
        "pattern": "%{elasticsearch.uam.search.id};%{elasticsearch.uam.origination}:%{}:%{elasticsearch.uam.application}:%{elasticsearch.uam.saved_object.id}",
        "ignore_missing": true,
        "ignore_failure": true
      }
    },
    {
      "dissect": {
        "field": "elasticsearch.slowlog.message",
        "pattern": "[%{elasticsearch.uam.search.index}]%{}",
        "ignore_missing": true,
        "if": "ctx?.elasticsearch?.slowlog?.message != '' && ctx?.elasticsearch?.slowlog?.message != null",
        "ignore_failure": true
      }
    },
    {
      "remove": {
        "field": "elasticsearch.slowlog.message",
        "if": "ctx?.elasticsearch?.slowlog?.message != '' && ctx?.elasticsearch?.slowlog?.message != null",
        "ignore_failure": true,
        "ignore_missing": true
      }
    },
    {
      "date": {
        "target_field": "@timestamp",
        "formats": [
          "ISO8601"
        ],
        "field": "@timestamp",
        "ignore_failure": true
      }
    },
    {
      "gsub": {
        "field": "elasticsearch.slowlog.source",
        "pattern": "\\\\",
        "replacement": ""
      }
    },
    {
      "json": {
        "field": "elasticsearch.slowlog.source",
        "target_field": "temp",
        "ignore_failure": true
      }
    },
    {
      "convert": {
        "field": "temp.query",
        "type": "string",
        "ignore_failure": true,
        "ignore_missing": true
      }
    },
    {
      "convert": {
        "field": "temp.aggregations",
        "type": "string",
        "ignore_missing": true,
        "if": "ctx?.temp?.aggregations != null",
        "ignore_failure": true
      }
    },
    {
      "rename": {
        "field": "temp.query",
        "target_field": "elasticsearch.uam.search.query",
        "ignore_missing": true,
        "if": "ctx?.temp?.query != null",
        "ignore_failure": true
      }
    },
    {
      "remove": {
        "field": "temp",
        "ignore_failure": true,
        "ignore_missing": true
      }
    },
    {
      "grok": {
        "field": "elasticsearch.uam.search.query",
        "patterns": [
          "%{GREEDYDATA}, gte=%{TIMESTAMP_ISO8601:elasticsearch.uam.search.date_range.from}, lte=%{TIMESTAMP_ISO8601:elasticsearch.uam.search.date_range.to}%{GREEDYDATA}",
          "%{GREEDYDATA}, gte=%{NUMBER:elasticsearch.uam.search.date_range.from}, lte=%{NUMBER:elasticsearch.uam.search.date_range.to}%{GREEDYDATA}",
          "%{GREEDYDATA}gte=%{TIMESTAMP_ISO8601:elasticsearch.uam.search.date_range.from}, lte=%{TIMESTAMP_ISO8601:elasticsearch.uam.search.date_range.to}%{GREEDYDATA}",
          "%{GREEDYDATA}, lte=%{TIMESTAMP_ISO8601:elasticsearch.uam.search.date_range.to}, gt=%{TIMESTAMP_ISO8601:elasticsearch.uam.search.date_range.from}%{GREEDYDATA}",
          "%{GREEDYDATA}, gte=%{NUMBER:elasticsearch.uam.search.date_range.from},%{GREEDYDATA}, lte=%{NUMBER:elasticsearch.uam.search.date_range.to}%{GREEDYDATA}",
          "%{GREEDYDATA}, gte=%{TIMESTAMP_ISO8601:elasticsearch.uam.search.date_range.to}%{GREEDYDATA}lte=%{TIMESTAMP_ISO8601:elasticsearch.uam.search.date_range.from}%{GREEDYDATA}"
        ],
        "ignore_missing": true,
        "if": "ctx?.elasticsearch?.uam?.search?.query != '' && ctx?.elasticsearch?.uam?.search?.query != null",
        "ignore_failure": true
      }
    },
    {
      "date": {
        "field": "elasticsearch.uam.search.date_range.from",
        "formats": [
          "ISO8601",
          "UNIX_MS"
        ],
        "target_field": "elasticsearch.uam.search.date_range.from",
        "ignore_failure": true
      }
    },
    {
      "date": {
        "field": "elasticsearch.uam.search.date_range.to",
        "formats": [
          "ISO8601",
          "UNIX_MS"
        ],
        "target_field": "elasticsearch.uam.search.date_range.to",
        "ignore_failure": true
      }
    },
    {
      "script": {
        "source": "ctx.elasticsearch.uam.search.date_range.duration = ChronoUnit.DAYS.between((ZonedDateTime.parse(ctx.elasticsearch.uam.search.date_range.from)), (ZonedDateTime.parse(ctx.elasticsearch.uam.search.date_range.to)))",
        "if": "ctx?.elasticsearch?.uam?.search?.date_range?.from != '' && ctx?.elasticsearch?.uam?.search?.date_range?.from != null && ctx?.elasticsearch?.uam?.search?.date_range?.to != '' && ctx?.elasticsearch?.uam?.search?.date_range?.to != null",
        "ignore_failure": true
      }
    },
    {
      "urldecode": {
        "ignore_failure": true,
        "field": "elasticsearch.uam.search.index",
        "ignore_missing": true
      }
    },
    {
      "split": {
        "ignore_failure": true,
        "field": "elasticsearch.uam.search.index",
        "separator": ",",
        "ignore_missing": true
      }
    },
    {
      "dot_expander": {
        "field": "elasticsearch.slowlog.duration"
      }
    },
    {
      "rename": {
        "field": "elasticsearch.slowlog.duration",
        "target_field": "elasticsearch.uam.search.duration",
        "ignore_failure": true,
        "ignore_missing": true
      }
    },
    {
      "convert": {
        "field": "elasticsearch.uam.search.duration",
        "type": "double",
        "ignore_missing": true
      }
    },
    {
      "set": {
        "field": "elasticsearch.uam.search.hits",
        "value": 0
      }
    },
    {
      "grok": {
        "field": "elasticsearch.slowlog.total_hits",
        "patterns": [
          "%{NUMBER:elasticsearch.uam.search.hits:double}(\\+)? hits"
        ],
        "if": "ctx?.elasticsearch?.slowlog?.total_hits != '0+ hits'",
        "ignore_failure": true
      }
    },
    {
      "set": {
        "field": "elasticsearch.uam.opaque_id",
        "value": "{{ elasticsearch.slowlog.id }}"
      }
    },
    {
      "script": {
        "source": "List flatten_map(Map map, String parentKey) {\n    def l = [];\n    for (def e : map.entrySet()) {\n        def k = e.getKey();\n        def v = e.getValue();\n        String newKey = parentKey == null ? k : parentKey + \".\" + k;\n        if (v instanceof Map) {\n            flatten_map(v, newKey).stream()\n                .map(a -> [a.get(0), a.get(1)])\n                .collect(Collectors.toCollection(() -> l));\n        } else if (v instanceof List && v.size() > 0) {\n            flatten_list(v, newKey).stream()\n                .map(a -> [a.get(0), a.get(1)])\n                .collect(Collectors.toCollection(() -> l));\n        } else {\n            l.add(flatten_leave(newKey, v));\n        }\n    }\n    return l;\n}\n\nList flatten_list(List list, String parentKey) {\n    List l = [];\n    for (def e : list) {\n        String newKey = parentKey;\n        if (e instanceof Map) {\n            flatten_map(e, newKey).stream()\n                .map(a -> [a.get(0), a.get(1)])\n                .collect(Collectors.toCollection(() -> l));\n        } else if (e instanceof List && e.size() > 0) {\n            flatten_list(e, newKey).stream()\n                .map(a -> [a.get(0), a.get(1)])\n                .collect(Collectors.toCollection(() -> l));\n        } else {\n            l.add(flatten_leave(newKey, e));\n        }\n    }\n    return l;\n}\n\nList flatten_leave(String key, def leave_value) {\n    return [key, leave_value];\n}\n\nList query_shape_array(Map map) {\n    return flatten_map(map, null).stream()\n        .map(e -> e[0])\n        .sorted()\n        .collect(Collectors.toList());\n}\n\nif (ctx.elasticsearch == null) {\n    ctx.elasticsearch = new HashMap();\n}\nif (ctx.elasticsearch.slowlog == null) {\n    ctx.elasticsearch.slowlog = new HashMap();\n}\n\nString jsonString = ctx[\"elasticsearch\"][\"slowlog\"][\"source\"];\nMap map = Json.load(jsonString);\n\n// First script: Generate query shape array and signature\ndef query_shape_array = query_shape_array(map);\ndef query_shape_signature = Integer.toHexString(query_shape_array.hashCode());\nctx[\"elasticsearch\"][\"slowlog\"][\"query_shape_array\"] = query_shape_array;\nctx[\"elasticsearch\"][\"slowlog\"][\"query_shape_signature\"] = query_shape_signature;\n\nList flattened = flatten_map(map, null);\nMap flattenedMap = new HashMap();\nfor (def e : flattened) {\n    flattenedMap.put(e[0], e[1]);\n}\n\nctx.elasticsearch.slowlog.put(\"flattened_map\", flattenedMap);\n\nfor (String key : query_shape_array) {\n    if (flattenedMap.containsKey(key)) {\n        ctx.elasticsearch.slowlog.put(key, flattenedMap.get(key));\n    } else {\n        ctx.elasticsearch.slowlog.put(\"missing_key_\" + key, true);\n    }\n}\n\nList queryTerms = [];\nfor (def entry : flattenedMap.entrySet()) {\n    String key = entry.getKey();\n    if (key.endsWith(\".query\")) {\n        queryTerms.add(entry.getValue().toString());\n    }\n}\nctx.elasticsearch.put(\"extracted_query_terms\", queryTerms);\n",
        "ignore_failure": true
      }
    },
    {
      "remove": {
        "field": "elasticsearch.slowlog.flattened_map"
      }
    },
    {
      "gsub": {
        "field": "elasticsearch.slowlog.took",
        "pattern": ".*micros",
        "replacement": "0ms"
      }
    },
    {
      "gsub": {
        "field": "elasticsearch.slowlog.took",
        "pattern": "ms",
        "replacement": "",
        "target_field": "elasticsearch.uam.search.duration",
        "ignore_missing": true
      }
    },
    {
      "convert": {
        "field": "elasticsearch.uam.search.duration",
        "type": "long"
      }
    }
  ],
  "on_failure": [
    {
      "set": {
        "description": "Record error information",
        "field": "elasticsearch.uam.error",
        "value": "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message {{ _ingest.on_failure_message }}"
      }
    }
  ]
}
